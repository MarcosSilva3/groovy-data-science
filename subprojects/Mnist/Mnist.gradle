/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import static JavaFXUtil.checkForJavaFX

apply plugin: 'groovy'

repositories {
//    mavenLocal()
    mavenCentral()
}

tasks.register('checkJdk8Compatibility') {
    doLast {
        assert JavaVersion.current().isJava8(), "JDK8 is required but found ${JavaVersion.current()}!"
    }
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:$groovy3Version"
    implementation "org.nd4j:nd4j-native-platform:$nd4jVersion"
    implementation "org.deeplearning4j:deeplearning4j-core:$nd4jVersion"
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"
    if (JavaVersion.current().isJava8() && checkForJavaFX()) {
        implementation 'org.groovyfx:groovyfx:8.0.0'
    }
    implementation "org.tribuo:tribuo-all:$tribuoVersion"
}

sourceSets {
    main {
        groovy {
            if (!JavaVersion.current().isJava8() || !checkForJavaFX()) {
                println """
********************************************************
** Excluding GroovyFX scripts due to incompatible JDK **
** ${ (JavaVersion.current().isJava8() ? "No JavaFX?" :
                        "Expecting Java 8 but found ${JavaVersion.current()}").padRight(50) } **
********************************************************
"""
                exclude '**/GroovyFXUtil.groovy'
                exclude '**/Gui.groovy'
            }
        }
    }
}

FileUtil.baseNames(sourceSets.main.allSource.files, ['MnistInfer', 'MnistReader', 'MnistTrainer']).each { name ->
    task "run$name"(type: JavaExec) {
        // current version of GroovyFX requires JDK8
        if (name.endsWith('Gui')) dependsOn([checkJdk8Compatibility])
        group 'Script'
        description "Run ${name}.groovy as a JVM application/Groovy script"
        classpath = sourceSets.main.runtimeClasspath
        mainClass = name
    }
}
