/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'groovy'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
//    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

ext.opennlp = JavaVersion.current().isJava8() ? opennlpLegacyVersion : opennlpVersion

dependencies {
    implementation "org.apache.groovy:groovy:$groovy4Version"
    implementation "org.apache.groovy:groovy-test:$groovy4Version"
    implementation "org.apache.opennlp:opennlp-tools:$opennlp"
    implementation "com.github.haifengl:smile-nlp:$smileVersion"
//    implementation "com.datumbox:datumbox-framework-lib:0.8.3-SNAPSHOT"
    implementation 'com.datumbox:datumbox-framework-lib:0.8.2'
    implementation "org.apache.tika:tika-core:$tikaVersion"
    implementation "org.apache.tika:tika-parser-pdf-module:$tikaVersion"
    //implementation 'com.github.Lambda-3:Graphene:v4.0.0-beta.1'
    implementation('com.github.uma-pi1:minie:master') {
        exclude(group: 'org.glassfish.jersey.*')
    }
    implementation 'edu.stanford.nlp:stanford-corenlp:4.5.4'
    implementation 'org.nlp4j:nlp4j-stanford:1.3.5.0'
    implementation 'org.nlp4j:nlp4j-kuromoji:1.3.4.0'
    runtimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"
}

tasks.register('checkJdk11Compatibility') {
    doLast {
        assert JavaVersion.current().isJava11Compatible(), "JDK11+ is required but found ${JavaVersion.current()}!"
    }
}

tasks.register('checkJdk8Exactly') {
    doLast {
        assert JavaVersion.current().isJava8(), "JDK8 is required but found ${JavaVersion.current()}!"
    }
}

FileUtil.baseNames(sourceSets.main.allSource.files, ['ResourceHelper']).each { name ->
    tasks.register("run$name", JavaExec) {
        group 'Application'
        dependsOn compileGroovy
        if (name.endsWith('JDK11')) dependsOn(checkJdk11Compatibility)
        if (name.endsWith('JDK8only')) dependsOn(checkJdk8Exactly)
        description "Run ${name}.groovy as a JVM application/Groovy script"
        classpath = sourceSets.main.runtimeClasspath
        mainClass = name
        doLast {
            File javaHome = new File(System.getProperty('java.home'))
            logger.lifecycle "Using Java from $javaHome (version ${System.getProperty('java.version')})"
            if (name.contains('OpenNLP')) logger.lifecycle "Using OpenNLP version $opennlp"
        }
    }
}
